/**
 * flex4angular
 * @version v0.1.0 - 2014-06-09
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
angular.module(
    // module name
    "flex4angular", [
        'flex4angular.viewstack', 
        'flex4angular.util.maxchar', 
        'flex4angular.util.util', 
        'flex4angular.util.sort', 
        'flex4angular.tabnavigator', 
        'flex4angular.breadcrumb',
        'flex4angular.panel'
    ]);
angular.module("flex4angular.breadcrumb", [])
	.factory('$faBreadcrumb', ['$location', '$rootScope', '$route',
		function($location, $rootScope, $route) {

			var breadcrumbs = [],
				routes = $route.routes;

			$rootScope.$on('$routeChangeSuccess', function(event, current) {
				breadcrumbs = [];

				var paths = $location.path().split('/'), 
					i;

				paths.shift();
				for (i = 0; i < paths.length; i++) {

					var path = '/' + (paths.slice(0, i + 1)).join('/');
					var route = routes[path];
					if (route && route.pageTitle) {
						breadcrumbs.push({
							label: route.pageTitle,
							path: path
						});

					}
				}
			});

			var list = function() {
				return breadcrumbs;
			};

			return {
				list: list
			};

		}
	]);
angular.module('flex4angular.dialog', ['pascalprecht.translate', 'ui.bootstrap'])

.run(["$templateCache",
	function($templateCache) {
		$templateCache.put("template/framework/dialog.html",
			"<div class=\"{{windowClass}}\">" +
			"	<div class=\"modal-header\">" +
			"		<h4 class=\"modal-title\">{{options.messageTitle | translate}}</h4>" +
			"	</div>" +
			"	<div class=\"modal-body\" ng-bind-html=\"toHTML(options.message)\"></div>" +
			"	<div class=\"modal-footer\" id=\"footerModal\">" +
			"		<span ng-repeat=\"button in options.buttons\" ng-click=\"action(button)\" class=\"btn btn-default\" " +
			"			ng-class=\"{active : button == defaultButton}\" >{{button.label | translate}}</span>" +
			"	</div>" +
			"</div>");
	}
]);

angular.module('flex4angular.dialog')
/**
  Factory para exibição da caixa de dialogo

	EX:
	$faDialog.confirm('Deseja excluir esse registro?', 'Exclusão', function(action) {
		if (action == $faDialog.btYES.action)
			console.log("registro excluído"); 
		});		
**/
.factory('$faDialog', ['$modal', '$sce', '$window', '$timeout',
	function($modal, $sce, $window, $timeout) {

		var btOK = {
			label: 'BT_OK',
			action: 'OK'
		};

		var btYES = {
			label: 'BT_YES',
			action: 'YES'
		};

		var btNO = {
			label: 'BT_NO',
			action: 'NO'
		};

		var btCANCEL = {
			label: 'BT_CANCEL',
			action: 'CANCEL'
		};

		var alert = function(message, messageTitle, handler) {
			if (!messageTitle)
				messageTitle = 'MESSAGE_TITLE_ALERT';
			showAlert(message, messageTitle, [btOK], handler, btOK, "dialog-alert");
		};

		var error = function(message, messageTitle, handler) {
			if (!messageTitle)
				messageTitle = 'MESSAGE_TITLE_ERROR';
			showAlert(message, messageTitle, [btOK], handler, btOK, "dialog-error");
		};

		var information = function(message, messageTitle, handler) {
			if (!messageTitle)
				messageTitle = 'MESSAGE_TITLE_INFORMATION';
			showAlert(message, messageTitle, [btOK], handler, btOK, "dialog-information");
		};

		var success = function(message, messageTitle, handler) {
			if (!messageTitle)
				messageTitle = 'MESSAGE_TITLE_SUCCESS';
			showAlert(message, messageTitle, [btOK], handler, btOK, "dialog-success");
		};

		var confirm = function(message, messageTitle, handler, defaultButton) {
			if (!messageTitle)
				messageTitle = 'MESSAGE_TITLE_CONFIRM';
			if (!defaultButton)
				defaultButton = btYES;
			showAlert(message, messageTitle, [btYES, btNO], handler, defaultButton, "dialog-confirm");
		};

		var customized = function(message, messageTitle, buttons, handler, defaultButton, windowClass) {
			showAlert(message, messageTitle, buttons, handler, defaultButton, windowClass);
		};

		var showAlert = function(message, messageTitle, buttons, handler, defaultButton, windowClass) {

			var modalInstance = $modal.open({
				templateUrl: 'template/framework/dialog.html',
				controller: controllerAlert,
				backdrop: 'static',
				keyboard: false,
				resolve: {
					options: function() {
						return {
							message: message,
							messageTitle: messageTitle,
							buttons: buttons,
							handler: handler,
							defaultButton: defaultButton,
							windowClass: windowClass
						};
					}
				}
			});

		};

		var controllerAlert = function($scope, $modalInstance, options) {
			$scope.options = options;
			$scope.defaultButton = options.defaultButton;
			$scope.windowClass = options.windowClass;

			$scope.action = function(button) {
				angular.element($window).unbind('keydown keypress', $scope.keyFunction);
				$modalInstance.close();
				if ($scope.options.handler) {
					//delay para executar o handler só depois do modal estar fechado
					$timeout(function() {
						$scope.options.handler(button.action);
					}, 300);
				}
			};

			//função que permite a exibição do corpo da mensagem como html
			$scope.toHTML = function(text) {
				return $sce.trustAsHtml(text);
			};

			//controle de escolha das ações
			//13[enter], 32[space], 9[tab], 37[left], 39[right]
			$scope.keyFunction = function(e) {
				if (e.keyCode == 13 || e.keyCode == 32) {
					$scope.action($scope.defaultButton);
				} else if (e.keyCode == 9 || e.keyCode == 37 || e.keyCode == 39) {
					if (e.keyCode == 9)
						e.keyCode = e.shiftKey ? 37 : 39;
					var index = options.buttons.indexOf($scope.defaultButton);
					index += e.keyCode == 37 ? -1 : 1;
					if (index == options.buttons.length)
						index = 0;
					else if (index == -1)
						index = options.buttons.length - 1;

					$scope.defaultButton = options.buttons[index];
					$scope.$apply();
				}
				e.preventDefault();
			};

			angular.element($window).bind('keydown keypress', $scope.keyFunction);
		};

		return {
			alert: alert,
			error: error,
			information: information,
			success: success,
			confirm: confirm,
			customized: customized,
			btYES: btYES,
			btNO: btNO,
			btCANCEL: btCANCEL,
			btOK: btOK
		};
	}
]);
angular.module('flex4angular.loading', [])

/**
 * Factory para auxiliar o show é o hide da camada de bloqueio da tela
 */
.factory('$faLoading', ['$rootScope',
	function($rootScope) {
		$rootScope.loading = 0;
		return {
			start: function() {
				$rootScope.loading += 1;
			},
			stop: function() {
				$rootScope.loading -= 1;
			}
		};
	}
])

/**
 * Diretiva que coloca uma camada de bloqueio na tela
 * Obs. O show e hide deve ser inserido manualmente
 * EX:
 *		<fa-loading><!-- Desenhar a sua tela --></fa-loading>
 *
 */
.directive('faLoadingView', ['$rootScope', '$window',
	function($rootScope, $window) {
		return {
			scope: {},
			restrict: 'E',
			transclude: true,
			template: '<div class="loading" ng-transclude ng-show="loading"></div>',
			link: function($scope) {
				$scope.preventFunc = function(e) {
					e.preventDefault();
				};
				$rootScope.$watch('loading', function(newValue, oldValue, scope) {
					$scope.loading = newValue > 0;
					if (!oldValue && newValue > 0) {
						angular.element($window).bind('keydown keypress', $scope.preventFunc);
					}
					if (oldValue > 0 && !newValue) {
						angular.element($window).unbind('keydown keypress', $scope.preventFunc);
					}
				});
			}
		};
	}
]);
angular.module('flex4angular.panel', []).directive('faPanel', [
    function() {
        return {
            restrict: 'E',
            transclude: true,
            scope: {
                title: '@title'
            },
            replace: true,
            template: '<div class="panel panel-default">' + '<div class="panel-heading">' + '<h3 class="panel-title">{{title}}</h3>' + '</div>' + '<div class="panel-body" ng-transclude>' + '</div>' + '</div>'
        };
    }
]);
angular.module('flex4angular.tabnavigator', [])

.directive(
	'faTabnavigator', [

		function() {
			return {
				restrict: 'E',
				transclude: true,
				scope: {},
				replace: true,
				link: function($scope, tElement, tAtrrs) {
					$scope.panes = [];

					angular.forEach(tElement[0].children[1].children, function(pane) {
						pane.classList.add('tab-pane');
						$scope.panes.push(pane);
					});

					$scope.selectItem = function(p) {
						var i = 0;

						angular.forEach($scope.panes, function(pane) {
							if (p === pane) {
								pane.classList.add('active');
								pane.active = true;
							} else {
								pane.classList.remove("active");
								pane.active = false;
							}

							i++;
						});
					};

					if (tAtrrs.selectedIndex !== null) {
						$scope.$parent.$watch(tAtrrs.selectedIndex, function(index) {
							var i = index;
							if (angular.isUndefined(i)) {
								i = 0;
							}
							$scope.selectItem(tElement[0].children[1].children[i]);
						});
					}

				},
				template: 
                    '<div class="tabbable">' +
                        '<ul class="nav nav-tabs">' +
                            '<li ng-repeat="pane in panes" ng-class="{active:pane.active}">' +
                                '<a href="" ng-click="selectItem(pane)">{{pane.title}}</a>' +
                            '</li>' +
                        '</ul>' +
                        '<div class="tab-content" ng-transclude></div>' +
                    '</div>',
			};
		}
	]);
angular.module('flex4angular.util.maxchar', [])
/**
 * Diretiva para não permitir o usário digitar mais caracteres do que o permitido
 * EX:
 *		<input type="text" class="form-control" data-fa-maxchar="4" />
 */
.directive('faMaxchar',
	function() {
		return {
			link: function(scope, element, attrs) {
				var maxlength = Number(attrs.faMaxchar);
				//controla o conteúdo ao usuário pressionar as teclas
				element.bind('keypress', function(event) {
					var el = event.target;
					if (el.value.length - (el.selectionEnd - el.selectionStart) >= maxlength && event.keyCode != 13 && event.keyCode != 9) {
						event.preventDefault();
					}
				});
				//Controla o conteúdo colado
				element.bind('paste', function(event) {
					var oldVal = event.target.value;
					var start = event.target.selectionStart;
					var end = event.target.selectionEnd;
					setTimeout(function() {
						var value = event.target.value;
						if (value.length > maxlength) {
							var qtdNewChar = value.length - oldVal.length;
							var transformedInput = value.substring(0, start) + value.substring(start, start + maxlength - oldVal.length + (end - start)) + value.substring(end + qtdNewChar, oldVal.length + qtdNewChar);
							event.target.value = transformedInput;
							return transformedInput;
						}
					}, 0);
				});
			}
		};
	}
);
angular.module('flex4angular.util.sort', []).filter("faSort", ['$faUtil',
    function($faUtil) {
        return function(array, property, reverseOrder) {
            if(!angular.isArray(array)) return array;
            if(!property || !angular.isString(property)) return array;
            var arrayCopy = [];
            for(var i = 0; i < array.length; i++) {
                arrayCopy.push(array[i]);
            }
            return arrayCopy.sort(comparator(compareValues, reverseOrder));

            function comparator(comp, descending) {
                return $faUtil.toBoolean(descending) ? function(a, b) {
                    return comp(b, a);
                } : comp;
            }

            function compareValues(a, b) {
                return $faUtil.compareValues(a, b, property);
            }
        };
    }
]);
angular.module('flex4angular.util.util', []).factory('$faUtil', ['$locale',
    function($locale) {
        var padding = function(value) {
            return "00000000000000000000".slice(value.length);
        },
            // convert um valor para string
            toString = function(value) {
                if(value === null || value === undefined) return '';
                return '' + value;
            },
            // Calcula o default ordem do mÃªs para uma data (dd/MM/yyyy vs MM/dd/yyyy)
            natDateMonthFirst = $locale.DATETIME_FORMATS.shortDate.charAt(0) === "M",
            // fix a data para comparaÃ§Ã£o
            fixDates = function(value) {
                return toString(value).replace(/(\d\d?)[-\/\.](\d\d?)[-\/\.](\d{4})/, function($0, $m, $d, $y) {
                    var t = $d;
                    if(!natDateMonthFirst) {
                        if(Number($d) < 13) {
                            $d = $m;
                            $m = t;
                        }
                    } else if(Number($m) > 12) {
                        $d = $m;
                        $m = t;
                    }
                    return $y + "-" + $m + "-" + $d;
                });
            },
            // Fix o nÃºmero com padding para comparaÃ§Ã£o
            //adicionado um z na frente para ordernar igual ao oracle (nÃºmeros depois)
            fixNumbers = function(value) {
                return value.replace(/(\d+)((\.\d+)+)?/g, function($0, integer, decimal, $3) {
                    if(decimal !== $3) {
                        return $0.replace(/(\d+)/g, function($d) {
                            return 'Z' + padding($d) + $d;
                        });
                    } else {
                        decimal = decimal || ".0";
                        return 'Z' + padding(integer) + integer + decimal + padding(decimal);
                    }
                });
            },
            // Fix um valor em nÃºmero ou data
            fixValue = function(value) {
                return fixNumbers(fixDates(value));
            },
            // convert um valor para boolean
            toBoolean = function(value) {
                if(typeof value === 'function') {
                    value = true;
                } else {
                    value = '' + value;
                    if(value && value.length !== 0) {
                        var v = angular.lowercase(value);
                        value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
                    } else {
                        value = false;
                    }
                }
                return value;
            },
            compareValues = function(a, b, property) {
                var v1 = fixValue(a[property]);
                var v2 = fixValue(b[property]);
                var t1 = typeof v1;
                var t2 = typeof v2;
                if(t1 == t2) {
                    if(t1 == "string") {
                        v1 = v1.toLowerCase();
                        v2 = v2.toLowerCase();
                    }
                    if(v1 === v2) return 0;
                    return v1 < v2 ? -1 : 1;
                } else {
                    return t1 < t2 ? -1 : 1;
                }
            };
        return {
            compareValues: compareValues,
            fixValue: fixValue,
            fixNumbers: fixNumbers,
            fixDates: fixDates,
            toBoolean: toBoolean
        };
    }
]);
angular.module('flex4angular.viewstack', [])

.directive(
	'faViewstack', [

		function() {
			var panes = [],
				select = function(index) {
					var i = 0;
					if (angular.isUndefined(index)) {
						index = 0;
					}
					angular.forEach(panes, function(pane) {
						if (index === i) {
							pane.classList.add('active');
						} else {
							pane.classList.remove("active");
						}

						i++;
					});
				};
			return {
				restrict: 'E',
				transclude: true,
				scope: {},
				replace: true,
				link: function($scope, tElement, tAtrrs) {
					angular.forEach(tElement[0].children, function(pane) {
						pane.classList.add('tab-pane');
						panes.push(pane);
					});

					if (tAtrrs.selectedIndex !== null) {
						$scope.$parent.$watch(tAtrrs.selectedIndex, function(index) {
							select(index);
						});
					}
				},
				template: '<div class="tab-content" ng-transclude></div>',
			};
		}
	]);