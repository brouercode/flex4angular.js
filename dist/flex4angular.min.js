/**
 * flex4angular
 * @version v0.1.0 - 2014-06-09
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
angular.module(
    // module name
    "flex4angular", [
        'flex4angular.viewstack'
    ]);
angular.module("flex4angular.breadcrumb", [])
	.factory('$faBreadcrumb', ['$location', '$rootScope', '$route',
		function($location, $rootScope, $route) {

			var breadcrumbs = [],
				routes = $route.routes;

			$rootScope.$on('$routeChangeSuccess', function(event, current) {
				breadcrumbs = [];

				var paths = $location.path().split('/'), 
					i;

				paths.shift();
				for (i = 0; i < paths.length; i++) {

					var path = '/' + (paths.slice(0, i + 1)).join('/');
					var route = routes[path];
					if (route && route.pageTitle) {
						breadcrumbs.push({
							label: route.pageTitle,
							path: path
						});

					}
				}
			});

			var list = function() {
				return breadcrumbs;
			};

			return {
				list: list
			};

		}
	]);
angular.module('flex4angular.tabnavigator', [])

.directive(
	'faTabnavigator', [

		function() {
			return {
				restrict: 'E',
				transclude: true,
				scope: {},
				replace: true,
				link: function($scope, tElement, tAtrrs) {
					$scope.panes = [];

					angular.forEach(tElement[0].children[1].children, function(pane) {
						pane.classList.add('tab-pane');
						$scope.panes.push(pane);
					});

					$scope.selectItem = function(p) {
						var i = 0;

						angular.forEach($scope.panes, function(pane) {
							if (p === pane) {
								pane.classList.add('active');
								pane.active = true;
							} else {
								pane.classList.remove("active");
								pane.active = false;
							}

							i++;
						});
					};

					if (tAtrrs.selectedIndex !== null) {
						$scope.$parent.$watch(tAtrrs.selectedIndex, function(index) {
							var i = index;
							if (angular.isUndefined(i)) {
								i = 0;
							}
							$scope.selectItem(tElement[0].children[1].children[i]);
						});
					}

				},
				template: 
                    '<div class="tabbable">' +
                        '<ul class="nav nav-tabs">' +
                            '<li ng-repeat="pane in panes" ng-class="{active:pane.active}">' +
                                '<a href="" ng-click="selectItem(pane)">{{pane.title}}</a>' +
                            '</li>' +
                        '</ul>' +
                        '<div class="tab-content" ng-transclude></div>' +
                    '</div>',
			};
		}
	]);
angular.module('flex4angular.util', [])
/**
 * Diretiva para não permitir o usário digitar mais caracteres do que o permitido
 * EX:
 *		<input type="text" class="form-control" data-fa-maxchar="4" />
 */
.directive('faMaxChar',
	function() {
		return {
			require: 'ngModel',
			link: function(scope, element, attrs, ngModelController) {
				var maxlength = Number(attrs.fwMaxChar);
				//controla o conteúdo ao usuário pressionar as teclas
				element.bind('keypress', function(event) {
					var el = event.target;
					if (el.value.length - (el.selectionEnd - el.selectionStart) >= maxlength && event.keyCode != 13 && event.keyCode != 9) {
						event.preventDefault();
					}
				});
				//Controla o conteúdo colado
				element.bind('paste', function(event) {
					var oldVal = event.target.value;
					var start = event.target.selectionStart;
					var end = event.target.selectionEnd;
					setTimeout(function() {
						var value = event.target.value;
						if (value.length > maxlength) {
							var qtdNewChar = value.length - oldVal.length;
							var transformedInput = value.substring(0, start) + value.substring(start, start + maxlength - oldVal.length + (end - start)) + value.substring(end + qtdNewChar, oldVal.length + qtdNewChar);
							event.target.value = transformedInput;
							return transformedInput;
						}
					}, 0);
				});
			}
		};
	}
);
angular.module('flex4angular.viewstack', [])

.directive(
	'faViewstack', [

		function() {
			var panes = [],
				select = function(index) {
					var i = 0;
					if (angular.isUndefined(index)) {
						index = 0;
					}
					angular.forEach(panes, function(pane) {
						if (index === i) {
							pane.classList.add('active');
						} else {
							pane.classList.remove("active");
						}

						i++;
					});
				};
			return {
				restrict: 'E',
				transclude: true,
				scope: {},
				replace: true,
				link: function($scope, tElement, tAtrrs) {
					angular.forEach(tElement[0].children, function(pane) {
						pane.classList.add('tab-pane');
						panes.push(pane);
					});

					if (tAtrrs.selectedIndex !== null) {
						$scope.$parent.$watch(tAtrrs.selectedIndex, function(index) {
							select(index);
						});
					}
				},
				template: '<div class="tab-content" ng-transclude></div>',
			};
		}
	]);